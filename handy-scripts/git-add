#!/bin/sh


[[ -z $(git status -s) ]] && exit 0
[[ -z $1 ]] || git add $1
[[ -z $1 ]] || exit 0

CYAN='\033[0;36m'
GREEN='\033[0;92m'
NC='\033[0m'
ORANGE='\033[0;33m'
RED='\033[0;91m'

file_preview() {
  fzf -e \
    --preview "bat --color=always {}" \
    --preview-window right,70% \
    --bind up:preview-page-up,down:preview-page-down \
    --header-first \
    --header "Select File" \
    --border-label " Stage Untracked File " \
    --preview-label " File Preview " \
    --padding 1
}

dirty_preview() {
  fzf -e \
    --preview "git diff --color=always {1} | delta" \
    --preview-window right,70% \
    --bind up:preview-page-up,down:preview-page-down \
    --header "Select File" \
    --header-first \
    --border-label " Stage Dirty File " \
    --preview-label " File Preview " \
    --padding 1
}

git_stage_untracked() {
  local untracked_files=$(git ls-files $(git rev-parse --show-toplevel 2> /dev/null) --exclude-standard --others 2> /dev/null)
  [[ -z $untracked_files ]] && echo "working tree clean, nothing to stage" && exit 0
  local selected=$(echo $untracked_files | tr ' ' '\n' | file_preview)
  [[ -z $selected ]] || git add $selected
}

git_stage_modified() {
  local dirty_files=$(git ls-files $(git rev-parse --show-toplevel 2> /dev/null) -m 2> /dev/null)
  [[ -z $dirty_files ]] && echo "working tree clean, nothing to stage" && exit 0
  local selected=$(echo $dirty_files | tr ' ' '\n' | dirty_preview)
  [[ -z $selected ]] || git add $selected
}

git_stage_what() {
  local selected=$(printf "${RED}modified ${CYAN}untracked" | tr ' ' '\n' | fzf --ansi --header-first --header "$(printf "git ${GREEN}add ${NC}what?")" --margin=30%,30% --border-label " Stage File ")
  [[ -z $selected ]] && exit 0
  echo $selected
}

git_stage() {
  local selected=$(git_stage_what)
  [[ "$selected" = "modified" ]] && git_stage_modified
  [[ "$selected" = "untracked" ]] && git_stage_untracked
}

git_stage
